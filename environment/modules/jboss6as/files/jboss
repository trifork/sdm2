#!/bin/bash
### BEGIN INIT INFO
# Provides:          jboss
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: fast and reliable load balancing reverse proxy
# Description:       This file should be used to start and stop jboss.
### END INIT INFO

# Author: Arnaud Cornet <acornet@debian.org>
# Extended by: Holger Just <h.just _at_ finn.de>

# This file is maintained using a puppet template in jboss::install class

#define where JDK is installed
JAVA_HOME=/pack/jdk
export JAVA_HOME

#define where jboss is - this is the directory containing directories log, bin, conf etc
JBOSS_HOME=${JBOSS_HOME:-"/pack/jboss"}

#define the user under which jboss will run, or use 'RUNASIS' to run as the current user
JBOSS_USER=${JBOSS_USER:-"jboss"}

#make sure java is in your path
JAVAPTH=${JAVAPTH:-"/usr/bin"}

#configuration to use, usually one of 'minimal', 'default', 'all'
JBOSS_CONF=${JBOSS_CONF:-"default"}
JBOSS_CONSOLE=/pack/jboss/log/console.log

#if JBOSS_HOST specified, use -b to bind jboss services to that address, 0.0.0.0 means all interfaces
JBOSS_HOST=127.0.0.1
JBOSS_BIND_ADDR=${JBOSS_HOST:+"-b $JBOSS_HOST"}

#define the classpath for the shutdown class
JBOSSCP=${JBOSSCP:-"$JBOSS_HOME/bin/shutdown.jar:$JBOSS_HOME/client/jnet.jar"}

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin:/usr/local/bin
PIDFILE=/var/run/jboss.pid
#CONFIG_DIR=/pack/jboss/conf
#CONFIG=$CONFIG_DIR/jboss.conf
JBOSS=$JBOSS_HOME/bin/run.sh

# Configure JBOSS ports 
JBOSS_PORT=1090 
EXTRAOPTS="-c $JBOSS_CONF $JBOSS_BIND_ADDR -Djboss.service.binding.set=ports-default"

test -x $JBOSSSH || exit 0
#test -f "$CONFIG" || exit 0

[ -f /etc/default/rcS ] && . /etc/default/rcS
. /lib/lsb/init-functions

jboss_start()
{
	ulimit -n 4096
	logger -p daemon.info -t JBOSS 'starting JBOSS'
        start-stop-daemon --start --make-pidfile --pidfile "$PIDFILE" --background -c $JBOSS_USER  \
                -d $JBOSS_HOME --exec $JBOSS -- \
                $EXTRAOPTS || return 2
        return 0
}

jboss_stop()
{
    MYPID=`cat $PIDFILE`
#    MYCPIDS=`pgrep -P $MYPID`
    if [ ! -f $PIDFILE ] ; then
        # This is a success according to LSB
        return 0
    fi
    logger -p daemon.info -t JBOSS 'Shutting down JBOSS'
    cd $JBOSS_HOME ; $JBOSS_HOME/bin/shutdown.sh -S --port=$JBOSS_PORT --host=localhost 2>/dev/null
    if [ $? -eq 1 ]; then
        logger -p daemon.info -t JBOSS 'JBOSS appears to be initializing, waiting 60 secs and will then retry'
        echo "JBOSS appears to be initializing, waiting 60 secs and will then retry"
        sleep 60
        echo "Done sleeping, retry shutdown of jboss"
        cd $JBOSS_HOME ; $JBOSS_HOME/bin/shutdown.sh -S --port=$JBOSS_PORT --host=localhost 2>/dev/null
    fi

    xi=1
    
    while true; do
	if ps --no-headers --ppid "$pid" -f | grep "java" > /dev/null ; then
              # java is running, sleep
	    echo -n "."
	    sleep 1
	    xi=$[xi+1]
	else
	    logger -p daemon.info -t JBOSS 'Shutdown of JBOSS success'
	    rm -f $PIDFILE
	    return 0 
        fi 
	if [ $xi -gt 30 ]; then
	    log_end_msg 1
	    logger -p daemon.warn -t JBOSS 'Shutdown of JBOSS failed, timed out waiting for shutdown'
	    echo "ERROR - Timeout waiting for JBOSS to shutdown"
	    exit 1
        fi
    done
    return 0
}


jboss_status()
{
    if [ ! -f $PIDFILE ] ; then
                # program not running
        return 3
    fi
    
    # List processes with ppid equal saved PID
    for pid in $(cat $PIDFILE) ; do
        if ! ps --no-headers --ppid "$pid" -f | grep "java" > /dev/null ; then
            # program running, bogus pidfile
            return 1
        fi
    done
    
    return 0
}


case "$1" in
start)
        log_daemon_msg "Starting jboss" "jboss"
        jboss_start
        ret=$?
        case "$ret" in
        0)
                log_end_msg 0
                ;;
        1)
                log_end_msg 1
                echo "pid file '$PIDFILE' found, jboss not started."
                ;;
        2)
                log_end_msg 1
                ;;
        esac
        exit $ret
        ;;
stop)
        log_daemon_msg "Stopping jboss" 
	pid=`cat $PIDFILE`
        jboss_stop
        ret=$?
	# xi=1
	# while true; do
	#     if ps --no-headers --ppid "$pid" -f | grep "java" > /dev/null ; then
        #       # java is running, sleep
	# 	echo -n "."
	# 	sleep 1
	# 	xi=$[xi+1]
	#     else
	# 	break
        #     fi 
	#     if [ $xi -gt 30 ]; then
	# 	log_end_msg 1
	# 	echo "Timeout waiting for JBOSS to shutdown"
	# 	exit 1
        #     fi
	# done

        case "$ret" in
        0|1)
                log_end_msg 0
                ;;
        2)
                log_end_msg 1
                ;;
        esac
        exit $ret
        ;;
restart)
	if [ ! -f $PIDFILE ]; then 
	    echo "Cannot find PIDFILE: $PIDFILE, exiting"
	    exit 1
	fi
        log_daemon_msg "Restarting JBOSS application Server" 
	pid=`cat $PIDFILE`
        jboss_stop

	# xi=1
	# while true; do
	#     if ps --no-headers --ppid "$pid" -f | grep "java" > /dev/null ; then
        #       # java is running, sleep
	# 	echo -n "."
	# 	sleep 1
	# 	xi=$[xi+1]
	#     else
	# 	break
        #     fi 
	#     if [ $xi -gt 30 ]; then
	# 	log_end_msg 1
	# 	echo "Timeout waiting for JBOSS to shutdown"
	# 	exit 1
        #     fi
	# done
        jboss_start
        case "$?" in
        0)
                log_end_msg 0
                ;;
        1)
                log_end_msg 1
                ;;
        2)
                log_end_msg 1
                ;;
        esac
        ;;
status)
        jboss_status
        ret=$?
        case "$ret" in
        0)
                echo "jboss is running. PID=`cat $PIDFILE`"
                ;;
        1)
                echo "jboss dead, but $PIDFILE exists."
                ;;
        *)
                echo "jboss not running."
                ;;
        esac
        exit $ret
        ;;

*)
        echo "Usage: /etc/init.d/jboss {start|stop|restart|status}"
        exit 2
        ;;
esac
